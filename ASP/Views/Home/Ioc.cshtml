@model ASP.Models.Home.Ioc.IocPageModel

@{
	ViewData["Title"] = @Model.TabHeader;
}

<div class="text-center">
	<h1 class="display-4">@Model.PageTitle</h1>
</div>
<p>
	@Model.IoCIs
</p>
<ul>
	@foreach(var text in @Model.IoCOptions)
	{
		<li>@text</li>
	}
</ul>
<p>
	<strong>Створення сервісу</strong> слід виконувати з дотриманням
	принципу DIP (з SOLID) - принципу інверсії залежностей.
	<em>
		не плутати !! є три терміни:
		"інверсія управління",
		"інжекція залежностей"
		"інверсія залежностей"
		всі вони є різними, хоч і стосуються близьких задач.
	</em>
	<br />
	Принцип DIP "не створювати залежності від реалізацій, створювати від
	абстракцій" практично радить при створенні сервісу почати з інтерфейсу
	і лише потім створити клас. Це дозволить замінювати класи, але не
	змінювати інтерфейси.
</p>
<p>
	На прикладі створення сервісу гешування:
</p>
<ul>
	@foreach (var text in @Model.HashExm)
	{
		<li>@text</li>
	}
</ul>
<h3>Декілька випадкових дайджестів:</h3>
@foreach(var pair in Model.Hashes)
{
	<p>@pair.Key -- @pair.Value</p>
}