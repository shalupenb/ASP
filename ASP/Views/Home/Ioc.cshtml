@{
	ViewData["Title"] = "Ioc";
}

<div class="text-center">
	<h1 class="display-4">Інверсiя управління. Сервіси. </h1>
</div>
<p>
	IoC (Inversion of Control, Інверсія управління) - архітектурний шаблон,
	згідно з яким задачі управління життєвим циклом об'єктів перекладаються
	на спеціальний модуль (інжектор, контейнер залежностей, провайдер).
	Життєвий цикл об'єкта: CRUD. Практично це означає, що замість операторів
	<code>new / delete</code> будуть відповідні звернення до контейнеру.
</p>
<p>

</p>
<ul>
	<li>Створення сервісу - класу, що надає необхідну функціональність. </li>
	<li>Реєстрація всіх сервісів у контейнері (інжекторі)</li>
	<li>Інжекція сервісів у інші об'єкти, яким вони потрібні</li>
</ul>
<p>
	<strong>Створення сервісу</strong> слід виконувати з дотриманням
	принципу DIP (з SOLID) - принципу інверсії залежностей.
	<em>
		не плутати !! є три терміни:
		"інверсія управління",
		"інжекція залежностей"
		"інверсія залежностей"
		всі вони є різними, хоч і стосуються близьких задач.
	</em>
	<br />
	Принцип DIP "не створювати залежності від реалізацій, створювати від
	абстракцій" практично радить при створенні сервісу почати з інтерфейсу
	і лише потім створити клас. Це дозволить замінювати класи, але не
	змінювати інтерфейси.
</p>
<p>
	На прикладі створення сервісу гешування:
</p>
<ul>
	<li>(одноразово) Створюємо папку Services у корені проєкту. </li>
	<li>
		Оскільки сервіс - це щонайменше два файли (клас та інтерфейс),
		для кожного сервісу також створюються папки (Hash)
	</li>
	<li>Створюємо інтерфейс IHashService та клас Md5HashService </li>
	<li>Pеєструємо сервіс (див. Program.cs, рядок 8 і далі)</li>
	<li>Інжектуємо сервіс (див. HomeController)</li>
	<li>Перевіряємо його роботу: <i>@Model.SingleHash</i></li>
	<li>Iмітуємо задачу: необхідно перейти на інший геш-алгоритм SHA</li>
	<li>
		OCP (3 SOLID) "доповнюй, але не змінюй" -- створюємо новий
		клас ShaHashService у папці Services/Hash
	</li>
</ul>
<h3>Декілька випадкових дайджестів:</h3>
@foreach(var pair in Model.Hashes)
{
	<p>@pair.Key -- @pair.Value</p>
}